トラブルシューティングガイド
=====================

このガイドでは、AImatomeシステムで発生する可能性のある問題の詳細な診断方法と解決策を解説します。


【システム診断フロー】
------------------

問題が発生した場合、以下の順序で診断を進めてください：

1. status.txtファイルの確認
   → エラーメッセージや状態情報を確認

2. auto_processor.logファイルの確認
   → 詳細なエラーログとシステムの動作履歴を確認

3. 関連ファイルのチェック
   → 処理対象ファイル、設定ファイル、出力ファイルなどを確認

4. 環境の確認
   → Python環境、インターネット接続、ディスク容量などを確認


【エラーコードと解決策】
-------------------

◆ API関連エラー

・「API authentication error」
  原因: APIキーが無効または間違っている
  解決策: 
  1. .envファイルのAPIキーを確認
  2. OpenAIダッシュボードで有効なAPIキーを取得
  3. キーをコピー&ペーストする際に余分な空白がないことを確認

・「Rate limit exceeded」
  原因: APIの呼び出し頻度制限に達した
  解決策:
  1. 数分待ってから再試行
  2. OpenAIダッシュボードでレート制限を確認
  3. 処理の頻度を下げるためcheck_intervalを大きくする

・「Invalid model: [モデル名]」
  原因: 指定されたモデルが存在しないか利用できない
  解決策:
  1. 「モデル情報.txt」で最新のモデル情報を確認
  2. auto_config.jsonのmodelパラメータを有効なモデルに変更
  3. OpenAIアカウントがそのモデルにアクセス権を持っているか確認

・「Context length exceeded」
  原因: 入力文字数が多すぎてモデルの制限を超えている
  解決策:
  1. より小さなファイルに分割して処理
  2. 重要でない部分を手動で削除
  3. より大きなコンテキスト長をサポートするモデルに変更


◆ ファイル処理エラー

・「ファイル読み込みエラー」
  原因: ファイルへのアクセスができない
  解決策:
  1. ファイルが他のプログラムで開かれていないか確認
  2. ファイルの権限設定を確認
  3. 非ASCII文字がファイル名に含まれていないか確認

・「エンコーディングエラー」
  原因: ファイルのエンコーディングを判別できない
  解決策:
  1. テキストエディタでファイルを開き、UTF-8形式で保存し直す
  2. 特殊な文字や制御文字がないか確認
  3. BOMヘッダーの有無を確認

・「保存エラー」
  原因: 出力ファイルを保存できない
  解決策:
  1. 出力フォルダの存在と書き込み権限を確認
  2. ディスク容量に十分な空きがあるか確認
  3. 既存ファイルが読み取り専用になっていないか確認


◆ 設定関連エラー

・「JSONデコードエラー」
  原因: auto_config.jsonのフォーマットが不正
  解決策:
  1. JSONの構文エラーを修正（カンマ、引用符などを確認）
  2. オンラインJSONバリデータでチェック
  3. バックアップからファイルを復元

・「フォルダが存在しません」
  原因: 設定で指定されたフォルダが存在しない
  解決策:
  1. フォルダパスが正しいか確認
  2. 絶対パスの場合、エスケープが正しいか確認（例: "C:\\Users\\名前"）
  3. 必要に応じてフォルダを手動で作成


【システム回復手順】
----------------

◆ 軽度の問題（処理は継続しているが一部エラー）

1. status.txtを確認してエラーの種類を特定
2. 特定のファイルの問題であれば、そのファイルを修正または削除
3. 設定の問題であれば、auto_config.jsonを修正
4. 必要に応じてシステムを再起動（run.batを実行）

◆ 重度の問題（システムが停止している）

1. auto_processor.logで最後のエラーを確認
2. 関連するエラーメッセージに基づいて問題を修正
3. すべてのプロセスが終了していることを確認（タスクマネージャでpythonプロセスを確認）
4. システムを再起動（run.batを実行）

◆ 最終手段（システムの完全リセット）

1. 処理中のファイルを別の場所にバックアップ
2. status.txtファイルを削除
3. auto_processor.logファイルを削除
4. システムを再起動（run.batを実行）


【パフォーマンス最適化】
------------------

◆ 処理速度の改善

1. チェック間隔の調整
   auto_config.jsonの"check_interval"を必要に応じて調整
   (頻繁にチェックする場合は小さく、余裕を持たせる場合は大きく)

2. モデル選択の最適化
   処理内容に応じて適切なモデルを選択
   (高速性が重要な場合はgpt-4o、高品質が必要な場合はgpt-4-turbo)

3. プロンプトの最適化
   簡潔で明確なプロンプトを使用することで処理速度が向上

◆ コスト最適化

1. モデル選択
   必要な品質に応じて最適なモデルを選択
   (標準的な議事録ならgpt-3.5-turboでコスト削減可能)

2. 入力最適化
   不要な文章を事前に削除して入力トークン数を削減
   
3. 利用制限の設定
   OpenAIダッシュボードで使用上限を設定し予期せぬ高額請求を防止


【長期運用のヒント】
---------------

1. 定期的なログファイルのクリーンアップ
   auto_processor.logが肥大化した場合は定期的に削除または移動

2. 設定のバックアップ
   auto_config.jsonとプロンプト設定の定期的なバックアップ

3. 処理済みファイルの管理
   archiveフォルダが肥大化した場合は、定期的に別の場所に移動または圧縮

4. セキュリティ管理
   APIキーの定期的な更新とアクセス管理